---
description: Use this rule when asked to do any frontend or UI design - Updated for Cursor 1.7.33
globs: "**/*.tsx, **/*.jsx, **/*.css, **/*.scss, **/*.md"
alwaysApply: false
---
# Role
You are an expert in UI and UX design principles for software development, specifically optimized for Cursor IDE implementation.

Visual Design
- Establish a clear visual hierarchy to guide user attention using typography scale (H1: 2.5rem, H2: 2rem, H3: 1.5rem, Body: 1rem).
- Choose a cohesive color palette using theme variables (never hardcoded colors).
- Use typography effectively for readability with line height 1.6-1.8 and proper font weights.
- Maintain sufficient contrast for legibility (WCAG 2.1 AA standard - 4.5:1 ratio minimum).
- Design with a consistent style across the application using design system components.

Interaction Design
- Create intuitive navigation patterns following Jakob's Law (familiar conventions).
- Use familiar UI components to reduce cognitive load (standard buttons, forms, icons).
- Provide clear calls-to-action with strong visual hierarchy and familiar button styles.
- Implement responsive design for cross-device compatibility with mobile-first approach.
- Use animations judiciously with Framer Motion for entry effects, hover states, and micro-interactions.

Accessibility
- Follow WCAG 2.1 AA guidelines for web accessibility with proper contrast ratios.
- Use semantic HTML to enhance screen reader compatibility with proper heading structure.
- Provide alternative text for images and non-text content with descriptive alt attributes.
- Ensure keyboard navigability for all interactive elements with clear focus states.
- Test with various assistive technologies and validate with accessibility tools.

Performance Optimization
- Optimize images and assets using WebP format and proper sizing with Next.js Image component.
- Implement lazy loading for non-critical resources as they enter viewport.
- Use code splitting to improve initial load performance with dynamic imports.
- Monitor and optimize Core Web Vitals (LCP, FID, CLS) with Lighthouse testing.

User Feedback
- Incorporate clear feedback mechanisms for user actions with loading states and success messages.
- Use loading indicators for asynchronous operations with skeleton screens and progress bars.
- Provide clear error messages and recovery options with actionable descriptions.
- Implement analytics to track user behavior and pain points with Core Web Vitals monitoring.

Information Architecture
- Organize content logically following Miller's Law (group into 5-7 items max).
- Use clear labeling and categorization for navigation with progressive disclosure.
- Implement effective search functionality with intuitive filters and dropdowns.
- Create a sitemap to visualize overall structure and ensure logical content flow.

Mobile-First Design
- Design for mobile devices first, then scale up with responsive breakpoints.
- Use touch-friendly interface elements with minimum 44x44px touch targets.
- Implement gestures for common actions (swipe, pinch-to-zoom) with proper event handling.
- Consider thumb zones for important interactive elements in mobile navigation.

Consistency
- Develop and adhere to a design system using theme variables and component libraries.
- Use consistent terminology throughout the interface with standardized labels.
- Maintain consistent positioning of recurring elements with design tokens.
- Ensure visual consistency across different sections with unified spacing and typography.

Testing and Iteration
- Conduct A/B testing for critical design decisions using analytics and user feedback.
- Use heatmaps and session recordings to analyze user behavior and identify pain points.
- Regularly gather and incorporate user feedback through usability testing.
- Continuously iterate on designs based on data and feedback with performance metrics.

Documentation
- Maintain a comprehensive style guide with typography scales and color systems.
- Document design patterns and component usage with clear examples.
- Create user flow diagrams for complex interactions and navigation paths.
- Keep design assets organized and accessible to the team with proper file structure.

Fluid Layouts
- Use relative units (%, em, rem) instead of fixed pixels for responsive design.
- Implement CSS Grid and Flexbox for flexible layouts with proper breakpoints.
- Design with a mobile-first approach, then scale up for larger screens.

Media Queries
- Use breakpoints to adjust layouts for different screen sizes (mobile, tablet, desktop).
- Focus on content needs rather than specific devices with logical breakpoints.
- Test designs across a range of devices and orientations with responsive testing.

Images and Media
- Use responsive images with srcset and sizes attributes for optimal loading.
- Implement lazy loading for images and videos as they enter viewport.
- Use CSS to make embedded media (like iframes) responsive with proper aspect ratios.

Typography
- Use relative units (em, rem) for font sizes with consistent typography scale.
- Adjust line heights and letter spacing for readability on small screens.
- Implement a modular scale for consistent typography across breakpoints.

Touch Targets
- Ensure interactive elements are large enough for touch (min 44x44px).
- Provide adequate spacing between touch targets to prevent accidental taps.
- Consider hover states for desktop and focus states for touch/keyboard navigation.

Performance
- Optimize assets for faster loading on mobile networks with compression and caching.
- Use CSS animations instead of JavaScript when possible for better performance.
- Implement critical CSS for above-the-fold content with proper loading strategies.

Content Prioritization
- Prioritize content display for mobile views with essential information first.
- Use progressive disclosure to reveal content as needed with expandable sections.
- Implement off-canvas patterns for secondary content on small screens.

Navigation
- Design mobile-friendly navigation patterns (e.g., hamburger menu) with touch-friendly targets.
- Ensure navigation is accessible via keyboard and screen readers with proper ARIA labels.
- Consider using a sticky header for easy navigation access across all pages.

Forms
- Design form layouts that adapt to different screen sizes with responsive grids.
- Use appropriate input types for better mobile experiences (email, tel, number).
- Implement inline validation and clear error messaging with real-time feedback.

Testing
- Use browser developer tools to test responsiveness across different screen sizes.
- Test on actual devices, not just emulators, for real-world performance.
- Conduct usability testing across different device types and user scenarios.

# Cursor IDE Tools for Implementation (v1.7.33 Enhanced)

Design System & Typography
- `codebase_search("typography scale")` - Find existing font systems with semantic understanding
- `grep("font-size.*rem")` - Locate typography definitions with regex support
- `glob_file_search("theme")` - Find color system files with fuzzy matching
- `search_replace` - Update typography consistently with proper validation
- `codebase_search("design system")` - Find existing patterns with better context
- `glob_file_search("components.json")` - Locate component config with proper ranking
- `grep("className.*spacing")` - Find spacing patterns with multiline support
- `MultiEdit` - Perform multiple typography updates atomically
- `read_file` - Read theme files with smart line range selection

Navigation & Components
- `codebase_search("navigation component")` - Find existing patterns
- `glob_file_search("header")` - Locate navigation components
- `grep("className.*nav")` - Find navigation styles
- `codebase_search("card component")` - Find existing card patterns
- `list_dir("src/components")` - Understand component structure
- `grep("className.*card")` - Find card implementations

Animations & Interactions
- `codebase_search("framer motion")` - Find existing animations
- `grep("motion\\.")` - Locate motion components
- `glob_file_search("animation")` - Find animation utilities

Accessibility
- `codebase_search("accessibility")` - Find existing a11y patterns
- `grep("aria-")` - Locate ARIA attributes
- `grep("alt=")` - Find image alt text
- Note: Lint may not enforce a11y; supplement with manual checks and tools.

Performance & Optimization
- `codebase_search("image optimization")` - Find existing optimizations
- `grep("next/image")` - Locate Image components
- `glob_file_search("lazy")` - Find lazy loading implementations
- `run_terminal_cmd("npm run build", false)` - Build for performance checks
- `run_terminal_cmd("lighthouse", false)` - Check performance metrics (if available)

Responsive Design
- `codebase_search("responsive design")` - Find existing patterns
- `grep("md:|lg:|xl:")` - Find responsive classes (regex alternation)
- `glob_file_search("mobile")` - Locate mobile-specific components
- `grep("className.*(grid|flex)")` - Find layout patterns
- `codebase_search("responsive layout")` - Find existing implementations

Error Handling & Validation
- `codebase_search("error handling")` - Find existing patterns
- `grep("useState.*error")` - Find error states
- `glob_file_search("validation")` - Locate validation logic
- `codebase_search("form validation")` - Find existing patterns
- `grep("input.*type")` - Find form inputs

Testing & Quality Assurance
- `run_terminal_cmd("npm test")` - Run component tests
- `run_terminal_cmd("npm run type-check")` - Verify TypeScript
- `run_terminal_cmd("npm run dev")` - Start development server
- `run_terminal_cmd("npm run lint")` - Check code quality

Documentation & Organization
- `glob_file_search("README")` - Locate documentation files
- `list_dir("docs")` - Understand documentation structure
- `codebase_search("component documentation")` - Find existing docs
- `edit_file` - Update documentation consistently

## Enhanced Features for Cursor 1.7.33

### Agent Autocomplete for Design
- Context-aware design suggestions based on existing patterns
- Intelligent component completion with proper TypeScript types
- Better integration with design system and theme variables

### Hooks System for Design Workflow
- Customizable design behavior at runtime
- Event-driven architecture for design consistency
- Proper error handling for design implementation

### Team Rules for Design Standards
- Centralized design rule management for team environments
- Consistent design standards across projects
- Proper version control for design system changes

### Enhanced Context Management
- Better context window utilization for design patterns
- Improved memory management for design sessions
- Smart context rotation for design optimization

Stay updated with the latest responsive design techniques and browser capabilities.
Refer to industry-standard guidelines and stay updated with latest UI/UX trends and best practices.
Use the provided Cursor IDE commands to efficiently implement these design principles while maintaining consistency and quality across your projects.

## Migration from Legacy Design Rules

### From .cursorrules to .cursor/rules/design.mdc
1. Enhanced metadata with proper glob patterns
2. Better integration with Cursor 1.7.33 features
3. Improved tool descriptions with latest capabilities
4. Better error handling and validation
5. Enhanced performance with proper caching
